(require 'package)
(menu-bar-mode -1)
(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(show-paren-mode)

(let (refreshed)
  (dolist (package '(paredit
                     auto-complete
                     clojure-mode
                     js2-mode
                     coffee-mode
                     magit
                     cider
                     highlight-parentheses
                     rainbow-delimiters
                     markdown-mode
                     ace-jump-mode
                     smart-mode-line
                     solarized-theme
                     json-mode))
    (unless (package-installed-p package)
      (when (not refreshed)
        (package-refresh-contents)
          (setq refreshed t))
          (package-install package))))

(require 'auto-complete)
(ac-config-default)
(setq ac-disable-faces nil)

(standard-display-ascii ?\t "^I")

(require 'ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
              
(setq magit-auto-revert-mode nil)

(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\emacs$" . clojure-mode))

(setq find-program "/usr/local/bin/find")
(setq grep-program "/usr/local/bin/grep")

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook 'cider-mode)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

; Custom Key Bindings
(global-set-key (kbd "M-e") 'cider-eval-buffer)
(global-set-key (kbd "M-n") 'cider-repl-set-ns)
(global-set-key (kbd "M-r") 'cider-jack-in)
(global-set-key (kbd "M-l") 'load-file)

(global-set-key (kbd "C-c m") 'magit-status)
(global-set-key (kbd "C-c e") 'eshell)
(global-set-key (kbd "C-c j") 'ace-jump-mode)

(defun split-window-vertically-evenly ()
  (interactive)
  (command-execute 'split-window-right)
  (command-execute 'other-window 1)
  (command-execute 'balance-windows)) 
(global-set-key (kbd "C-x 3") 'split-window-vertically-evenly)

(defun split-window-horizontally-evenly ()
  (interactive)
  (command-execute 'split-window-below)
  (command-execute 'other-window 1)
  (command-execute 'balance-windows))
(global-set-key (kbd "C-x 2") 'split-window-horizontally-evenly)

(defun close-window-evenly ()
  (interactive)
  (command-execute 'delete-window)
  (command-execute 'balance-windows))
(global-set-key (kbd "C-x 0") 'close-window-evenly)

;; Reverse colors for the border to have nicer line
(set-face-inverse-video-p 'vertical-border nil)
(set-face-background 'vertical-border (face-background 'default))

;; Set symbol for the border
(set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?â”ƒ))

;; Aliases
(defalias 'qrr 'query-replace-regexp)
(defalias 'qr 'query-replace)

;; Theme
(require 'solarized)

;; Status bar upgrade
(setq sml/theme 'light)
(setq sml/no-confirm-load-theme t)
(sml/setup)

;; Follow sym links
(setq vc-follow-symlinks t)

;; indent levels
(setq js-indent-level 2)
(setq css-indent-offset 2)

