set shell=/bin/bash
set so=7
set ai
set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set title
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmode=longest,list,full
set wildmenu
set showcmd
set report=0
set number
set lazyredraw
set ttyfast
set directory=/var/tmp
set backspace=indent,eol,start
set updatetime=300
set cmdheight=1
set nowrap
syntax on
syntax enable
silent !stty -ixon > /dev/null 2>/dev/null
nnoremap <CR> :nohlsearch<CR>
let mapleader = ","

" Auto remove trailing whitespaces
autocmd FileType c,cpp,java,php,scala,python,ruby autocmd BufWritePre <buffer> %s/\s\+$//e 

call plug#begin('~/.local/share/nvim/plugged')
  Plug 'scrooloose/nerdTree'
  Plug 'itchyny/lightline.vim'
  Plug 'tpope/vim-fugitive'
       " Plugins for Vim Fugitive GBrowse
       Plug 'tommcdo/vim-fubitive' " Bitbucket
       Plug 'tpope/vim-rhubarb' " Github
  Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}
       ":CocInstall coc-python

  " Tools
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } 
  Plug 'junegunn/fzf.vim'
  Plug 'terryma/vim-multiple-cursors'
  Plug 'airblade/vim-gitgutter'

  " Themes
  Plug 'rafi/awesome-vim-colorschemes'

  " Languages
  Plug 'rust-lang/rust.vim'
  Plug 'derekwyatt/vim-scala'
  Plug 'chrisbra/csv.vim'
  Plug 'GEverding/vim-hocon'

call plug#end()

" Dark Rustic Themes
"colorscheme deus
"colorscheme happy_hacking

" Medium Pristine Themes
"colorscheme seoul256
"colorscheme nord
let g:challenger_deep_termcolors = 16
colorscheme challenger_deep

""" Key mappings
nnoremap <Leader>ve :vsplit $MYVIMRC<CR>
nnoremap <Leader>vs :so $MYVIMRC<CR>
map } :execute "cnext"<CR>
map { :execute "cprev"<CR>

""" FZF
map <C-s> :execute "Ag"<CR>
map <C-p> :execute "GFiles"<CR>
map <C-f> :execute "Files"<CR>
map <C-l> :execute "Lines"<CR>
map <C-m> :execute "Marks"<CR>

""" NERDTREE
map <C-e> :NERDTreeToggle<CR>
let NERDTreeMapOpenVSplit = '<C-v>'
let NERDTreeMapOpenInTab = '<C-t>'
let NERDTreeMapOpenSplit = '<C-s>'

""" FILE SPECIFIC
au FileType fish compiler fish
au BufNewFile,BufRead *.pegjs set filetype=javascript
au BufNewFile,BufRead *.jsx set filetype=javascript
au BufNewFile,BufRead *.cjsx set filetype=javascript
au BufNewFile,BufRead *.cap set filetype=ruby
au BufNewFile,BufRead *.ejs set filetype=html
au BufNewFile,BufRead Gemfile set filetype=ruby
au! BufRead,BufNewFile *.json set filetype=json
au! FileType c,cpp,java,php call CSyntaxAfter()
au BufRead,BufNewFile *.sbt set filetype=scala
autocmd FileType json syntax match Comment +\/\/.\+$+
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

""" COC Plugin
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

let g:lightline = {
      \ 'colorscheme': 'challenger_deep',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'fugitive', 'filename', 'modified' ] ],
      \   'right': [['lineinfo'], ['percent'], ['fileencoding', 'filetype'], ['cocstatus']]
      \ },
      \ 'inactive': {
      \   'left': [['filename']],
      \   'right': [['lineinfo'], ['percent']]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status',
      \   'fugitive': 'FugitiveStatusline'
      \ }
      \ }
